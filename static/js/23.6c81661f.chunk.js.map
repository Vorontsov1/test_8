{"version":3,"file":"static/js/23.6c81661f.chunk.js","mappings":"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","sources":["components/IconButton/IconButton.styled.js","components/IconButton/IconButton.js","components/Loader/Loader.styled.js","components/Loader/Loader.js","components/ContactForm/ContactForm.js","components/Modal/Modal.styled.js","components/Modal/Modal.js","components/ContactList/Contact/Contacts.styled.js","components/ContactList/Contact/Contact.js","utils/random-colors.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Button = styled.button`\n  position: absolute;\n\n  right: 20px;\n\n  margin: 0;\n  padding: 10px;\n  border: none;\n  border-radius: 50%;\n  color: white;\n  font: inherit;\n  background-color: #5e92f3;\n  cursor: pointer;\n\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './IconButton.styled';\n\nconst IconButton = ({ children, onClick, ...allyProps }) => (\n  <Button type=\"button\" onClick={onClick} {...allyProps}>\n    {children}\n  </Button>\n);\n\nIconButton.defaultProps = {\n  onClick: () => null,\n  children: null,\n};\n\nIconButton.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.node,\n  'aria-label': PropTypes.string.isRequired,\n};\n\nexport default IconButton;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import PropTypes from 'prop-types';\nimport BarLoader from 'react-spinners/BarLoader';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport { Container } from './Loader.styled';\n\nexport const LoaderContact = ({ loading, color, size }) => {\n  return (\n    <ClipLoader\n      color={color}\n      loading={loading}\n      cssOverride={{\n        display: 'block',\n      }}\n      size={size}\n      aria-label=\"Loading Spinner\"\n      data-testid=\"loader\"\n    />\n  );\n};\n\nexport const LoaderContacts = ({ loading, color }) => {\n  return (\n    <Container>\n      <BarLoader\n        height={4}\n        width={280}\n        color={color}\n        loading={loading}\n        cssOverride={{\n          display: 'block',\n        }}\n        aria-label=\"Loading Spinner\"\n        data-testid=\"loader\"\n      />\n    </Container>\n  );\n};\n\nLoaderContact.propTypes = {\n  loading: PropTypes.bool,\n  color: PropTypes.string,\n  size: PropTypes.node,\n};\n\nLoaderContacts.propTypes = {\n  loading: PropTypes.bool,\n  color: PropTypes.string,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport toast from 'react-hot-toast';\nimport { selectContacts, selectOperation } from 'redux/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { LoaderContact } from 'components/Loader/Loader';\n\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme();\n\nexport default function ContactForm({ onClose }) {\n  const contacts = useSelector(selectContacts);\n\n  const operation = useSelector(selectOperation);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const form = e.target;\n    const { name, number } = form;\n\n    let value = {\n      name: name.value,\n      number: number.value,\n    };\n    // console.log(value);\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.value.toLowerCase()\n      )\n    ) {\n      return toast(`${name.value} is already in contacts.`, {\n        duration: 3000,\n      });\n    }\n\n    const { error } = await dispatch(addContact(value));\n    if (!error) {\n      form.reset();\n      onClose();\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            padding: '20px',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"30px\" sx={{ color: '#003b8e' }}>\n            New Contact\n          </Typography>\n          <Box\n            component=\"form\"\n            // noValidate\n            onSubmit={handleSubmit}\n            sx={{\n              mt: 3,\n              '& label.Mui-focused': {\n                color: '#5e92f3',\n              },\n\n              '& .MuiOutlinedInput-root': {\n                '&.Mui-focused fieldset': {\n                  borderColor: '#5e92f3',\n                },\n              },\n            }}\n          >\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"name\"\n                  label=\"Name contact\"\n                  name=\"name\"\n                  type=\"text\"\n                  autoComplete=\"name\"\n                  autoFocus\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"number\"\n                  name=\"number\"\n                  label=\"Number\"\n                  type=\"tel\"\n                  // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  autoComplete=\"new-tel\"\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              disabled={operation === 'add'}\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                gap: '20px',\n                mt: 3,\n                mb: 2,\n                bgcolor: '#5e92f3',\n              }}\n            >\n              {operation === 'add' ? (\n                <>\n                  <LoaderContact\n                    color={'#ffffff'}\n                    // color={'#003b8e'}\n                    size={20}\n                  />\n                  <span>Add ... </span>\n                </>\n              ) : (\n                'Add contact'\n              )}\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  z-index: 1200;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n`;\n\nexport const ModalWindow = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n\n  background-color: white;\n  transform: translate(-50%, -50%);\n  border-radius: 4px;\n`;\n","import { createPortal } from 'react-dom';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ContactForm from 'components/ContactForm';\nimport { Overlay, ModalWindow } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default class Modal extends Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyEsc);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyEsc);\n  }\n\n  handleKeyEsc = e => {\n    if (e.code === 'Escape') {\n      //   console.log('Нажали ESC');\n      this.props.onClose();\n    }\n  };\n\n  handleOverlayClick = e => {\n    // console.log('Где ловим/обрабатываем  клик currentTarget: ', event.currentTarget);\n    // console.log('куда кликаем target: ', event.target);\n\n    if (e.currentTarget === e.target) {\n      this.props.onClose();\n    }\n  };\n\n  render() {\n    return createPortal(\n      <Overlay onClick={this.handleOverlayClick}>\n        <ModalWindow>\n          <ContactForm onClose={() => this.props.onClose()} />\n        </ModalWindow>\n      </Overlay>,\n      modalRoot\n    );\n  }\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 30px;\n  padding: 5px 0;\n`;\n\nexport const Text = styled.p`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 5px;\n  font-family: inherit;\n  font-size: 15px;\n\n  flex-grow: 1;\n\n  span {\n    font-size: 12px;\n  }\n`;\n\nexport const Avatar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n\n  border-radius: 50%;\n  background-color: ${props => props.color};\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  padding: 0;\n  margin: 0;\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n\n  svg {\n    color: #bdbdbd;\n  }\n\n  &:hover {\n    svg {\n      color: #63a4ff;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MdDeleteForever } from 'react-icons/md';\n\nimport { getRandomHexColor, upFirst } from 'utils/index';\nimport { selectOperation } from 'redux/selectors';\nimport { LoaderContact } from 'components/Loader/Loader';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  ContactWrapper,\n  Text,\n  Avatar,\n  Button,\n} from 'components/ContactList/Contact/Contacts.styled';\n\nexport const Contact = ({ contact: { id, name, number } }) => {\n  const operation = useSelector(selectOperation);\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      <ContactWrapper>\n        <Avatar color={getRandomHexColor()}>{upFirst(name)}</Avatar>\n\n        <Text>\n          {name}\n          <span>Phone: {number}</span>\n        </Text>\n\n        <Button type=\"button\" onClick={handleDelete}>\n          {operation === id ? (\n            <LoaderContact\n              loading={operation === id}\n              color={'#003b8e'}\n              size={18}\n            />\n          ) : (\n            <MdDeleteForever size={28} />\n          )}\n        </Button>\n      </ContactWrapper>\n    </>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","export const getRandomHexColor = () => {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n};\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ContactListItem = styled.li`\n  border-top: 1px solid #5e91f2;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nimport { Contact } from 'components/ContactList/Contact/Contact';\nimport {\n  ContactsList,\n  ContactListItem,\n} from 'components/ContactList/ContactList.styled';\n\nconst ContactList = () => {\n  const visibleСontacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactsList>\n      {visibleСontacts.map(contact => (\n        <ContactListItem key={contact.id}>\n          <Contact contact={contact} />\n        </ContactListItem>\n      ))}\n    </ContactsList>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 350px;\n  position: relative;\n  padding: 20px;\n  margin: 0 auto;\n\n  border: 1px solid black;\n  border-radius: 10px;\n  border-color: #5e91f2;\n`;\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  text-align: center;\n  font-weight: 700;\n  font-size: 30px;\n  color: #003b8e;\n`;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectOperation, selectIsLoading } from 'redux/selectors';\n\nimport IconButton from 'components/IconButton';\nimport Modal from 'components/Modal';\nimport { AiOutlinePlus } from 'react-icons/ai';\n\nimport ContactList from 'components/ContactList';\nimport { LoaderContacts } from 'components/Loader/Loader';\nimport { Container, Title } from './Contacts.styled';\n\nconst Contacts = () => {\n  const [isShowModal, setShowModal] = useState(false);\n  const dispatch = useDispatch();\n  const operation = useSelector(selectOperation);\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const toggleModal = () => {\n    setShowModal(!isShowModal);\n  };\n\n  return (\n    <Container>\n      <IconButton onClick={toggleModal} aria-label=\"Add contacts\">\n        <AiOutlinePlus width=\"40\" height=\"40\" fill=\"#003b8e\" />\n      </IconButton>\n      {isShowModal && <Modal onClose={toggleModal} />}\n\n      <Title>Contacts</Title>\n\n      {operation === 'fetch' && !error ? (\n        <LoaderContacts loading={isLoading} color={'#2196f3'} />\n      ) : (\n        <ContactList />\n      )}\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["Button","styled","IconButton","children","onClick","allyProps","type","defaultProps","Container","LoaderContact","loading","color","size","cssOverride","display","LoaderContacts","height","width","theme","createTheme","ContactForm","onClose","contacts","useSelector","selectContacts","operation","selectOperation","dispatch","useDispatch","handleSubmit","e","preventDefault","form","target","name","number","value","some","contact","toLowerCase","toast","duration","addContact","error","reset","ThemeProvider","component","maxWidth","CssBaseline","Box","sx","flexDirection","alignItems","padding","Typography","variant","onSubmit","mt","borderColor","Grid","container","spacing","item","xs","TextField","required","fullWidth","id","label","autoComplete","autoFocus","disabled","justifyContent","gap","mb","bgcolor","Overlay","ModalWindow","modalRoot","document","querySelector","Modal","handleKeyEsc","code","props","handleOverlayClick","currentTarget","window","addEventListener","this","removeEventListener","createPortal","Component","ContactWrapper","Text","Avatar","Contact","Math","floor","random","toString","upFirst","deleteContact","ContactsList","ContactListItem","visibleСontacts","selectVisibleContacts","map","Title","useState","isShowModal","setShowModal","isLoading","selectIsLoading","selectError","useEffect","fetchContacts","toggleModal","fill"],"sourceRoot":""}