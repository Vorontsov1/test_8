{"version":3,"file":"static/js/699.0a5d1cba.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/Contact/Contacts.styled.js","components/ContactList/Contact/Contact.js","utils/upFirst.js","utils/random-colors.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Phonebook/Phonebook.styled.js","components/Phonebook/Phonebook.js","pages/Contacts/Contacts.js"],"sourcesContent":["// selectors.js - файл объявления функций-селекторов\n\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nconst selectValueFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectValueFilter],\n  (contacts, valueFilter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(valueFilter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  padding: 5px 0;\n`;\n\nexport const Text = styled.p`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 5px;\n  font-family: inherit;\n  font-size: 15px;\n\n  flex-grow: 1;\n\n  span {\n    font-size: 12px;\n  }\n`;\n\nexport const Avatar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n\n  border-radius: 50%;\n  background-color: ${props => props.color};\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  padding: 0;\n  margin: 0;\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n\n  svg {\n    color: #bdbdbd;\n  }\n\n  &:hover {\n    svg {\n      color: #2196f3;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { MdDeleteForever } from 'react-icons/md';\n\nimport { getRandomHexColor, upFirst } from 'utils/index';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  ContactWrapper,\n  Text,\n  Avatar,\n  Button,\n} from 'components/ContactList/Contact/Contacts.styled';\n\nexport const Contact = ({ contact: { id, name, phone } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ContactWrapper>\n      <Avatar color={getRandomHexColor()}>{upFirst(name)}</Avatar>\n\n      <Text>\n        {name}\n        <span>Phone: {phone}</span>\n      </Text>\n\n      <Button type=\"button\" onClick={handleDelete}>\n        <MdDeleteForever size={28} />\n      </Button>\n    </ContactWrapper>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n    createdAt: PropTypes.string,\n  }),\n};\n","export const upFirst = str => str.charAt(0).toUpperCase();\n","export const getRandomHexColor = () => {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n};\n","import styled from 'styled-components';\n\n// export const ContactsList = styled.ul`\n//   display: flex;\n//   flex-direction: column;\n//   gap: 10px;\n// `;\n\nexport const ContactsList = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ContactListItem = styled.li`\n  border-top: 1px solid #2f2f37;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nimport { Contact } from 'components/ContactList/Contact/Contact';\nimport {\n  ContactsList,\n  ContactListItem,\n} from 'components/ContactList/ContactList.styled';\n\nconst ContactList = () => {\n  const visibleСontacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactsList>\n      {visibleСontacts.map(contact => (\n        <ContactListItem key={contact.id}>\n          <Contact contact={contact} />\n        </ContactListItem>\n      ))}\n    </ContactsList>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 10px;\n\n  margin-bottom: 20px;\n\n  label {\n    display: block;\n    margin-bottom: 5px;\n    font-size: 20px;\n  }\n  input {\n    width: 250px;\n\n    font-size: 14px;\n\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    border-radius: 4px;\n    background-color: transparent;\n    padding: 5px;\n    outline: none;\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:focus {\n      border-color: #2196f3;\n    }\n  }\n  button {\n    padding: 5px 5px;\n    border: none;\n    border-radius: 4px;\n    min-width: 90px;\n\n    background-color: #2196f3;\n    color: #ffffff;\n\n    font-family: inherit;\n    font-weight: 500;\n    font-size: 14px;\n\n    text-align: center;\n\n    cursor: pointer;\n\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n      background-color: #2196f3;\n      color: #ffffff;\n      box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1),\n        0px 1px 2px rgba(0, 0, 0, 0.08), 0px 2px 2px rgba(0, 0, 0, 0.12);\n    }\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport { Form } from 'components/ContactForm/ContactForm.styled';\n\nexport function ContactForm() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const { name, number } = form;\n\n    let value = {\n      name: name.value,\n      phone: number.value,\n    };\n    // console.log(value);\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.value.toLowerCase()\n      )\n    ) {\n      return alert(`${name.value} is already in contacts.`);\n    }\n\n    dispatch(addContact(value));\n\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor={nanoid()}>Name</label>\n        <input\n          id={nanoid()}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n\n      <div>\n        <label htmlFor={nanoid()}>Number</label>\n        <input\n          id={nanoid()}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n\n      <button type=\"submit\">Add contact</button>\n    </Form>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 5px;\n\n  margin-bottom: 20px;\n\n  label {\n    display: block;\n    margin-bottom: 5px;\n    font-size: 20px;\n  }\n  input {\n    width: 250px;\n\n    font-size: 12px;\n\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    border-radius: 4px;\n    background-color: transparent;\n    padding: 5px;\n    outline: none;\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:focus {\n      border-color: #2196f3;\n    }\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filtersSlice';\nimport { Container } from 'components/Filter/Filter.styled';\nimport { nanoid } from 'nanoid';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    const { value } = e.target;\n    dispatch(setFilter(value.trim()));\n    // console.log(value);\n  };\n\n  return (\n    <Container>\n      <div>\n        <label htmlFor={nanoid()}>Find contacts by name</label>\n        <input\n          id={nanoid()}\n          type=\"text\"\n          name=\"filter\"\n          onChange={changeFilter}\n        />\n      </div>\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 280px;\n  padding: 20px;\n\n  margin: 0 auto;\n\n  border: 1px solid black;\n  border-radius: 10px;\n  box-shadow: rgb(0 0 0 / 20%) 0px 2px 1px -1px,\n    rgb(0 0 0 / 14%) 0px 1px 1px 0px, rgb(0 0 0 / 12%) 0px 1px 3px 0px;\n`;\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  text-align: center;\n  font-weight: 700;\n  font-size: 30px;\n`;\n\nexport const SubTitle = styled.h2`\n  margin-bottom: 20px;\n  text-align: center;\n  font-weight: 500;\n  font-size: 30px;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nimport { Container, Title, SubTitle } from './Phonebook.styled';\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <ContactForm />\n\n      <SubTitle>Contacts</SubTitle>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Phonebook;\n","// import { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactList from 'components/ContactList';\nimport Phonebook from 'components/Phonebook';\n// import { fetchTasks } from 'redux/tasks/operations';\n// import { selectLoading } from 'redux/tasks/selectors';\n\nexport default function Tasks() {\n  // const dispatch = useDispatch();\n  // const isLoading = useSelector(selectLoading);\n\n  //   useEffect(() => {\n  //     dispatch(fetchTasks());\n  //   }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Phonebook />\n      {/* <div>{isLoading && 'Request in progress...'}</div> */}\n      <ContactList />\n    </>\n  );\n}\n\n// ================================App hw-07================================================\n// import { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchContacts } from 'redux/operations';\n// import { selectError, selectIsLoading } from 'redux/selectors';\n\n// import { ContactForm } from 'components/ContactForm/ContactForm';\n// import { ContactList } from 'components/ContactList/ContactList';\n// import { Filter } from 'components/Filter/Filter';\n\n// import { Container, Title, SubTitle } from 'components/App.styled';\n\n// export const App = () => {\n//   const dispatch = useDispatch();\n//   const isLoading = useSelector(selectIsLoading);\n//   const error = useSelector(selectError);\n\n//   useEffect(() => {\n//     dispatch(fetchContacts());\n//   }, [dispatch]);\n\n//   return (\n//     <Container>\n//       <Title>Phonebook</Title>\n//       <ContactForm />\n\n//       <SubTitle>Contacts</SubTitle>\n//       <Filter />\n//       {isLoading && !error && <b>Request in progress...</b>}\n//       <ContactList />\n//     </Container>\n//   );\n// };\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","valueFilter","contact","name","toLowerCase","includes","ContactWrapper","styled","Text","Avatar","props","color","Button","Contact","str","id","phone","dispatch","useDispatch","Math","floor","random","toString","charAt","toUpperCase","type","onClick","deleteContact","size","ContactsList","ContactListItem","visibleСontacts","useSelector","map","Form","ContactForm","onSubmit","e","preventDefault","form","target","number","value","some","alert","addContact","reset","htmlFor","nanoid","pattern","title","required","Container","Filter","onChange","setFilter","trim","Title","SubTitle","useEffect","fetchContacts","Tasks","Helmet"],"sourceRoot":""}