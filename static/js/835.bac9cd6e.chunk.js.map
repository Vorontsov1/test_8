{"version":3,"file":"static/js/835.bac9cd6e.chunk.js","mappings":"wPAEaA,E,QAAYC,GAAAA,IAAH,8F,SCGTC,EAAgB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC9C,OACE,SAAC,IAAD,CACED,MAAOA,EACPD,QAASA,EACTG,YAAa,CACXC,QAAS,SAEXF,KAAMA,EACN,aAAW,kBACX,cAAY,UAGjB,EAEYG,EAAiB,SAAC,GAAwB,IAAtBL,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACxC,OACE,SAACJ,EAAD,WACE,SAAC,IAAD,CACES,OAAQ,EACRC,MAAO,IACPN,MAAOA,EACPD,QAASA,EACTG,YAAa,CACXC,QAAS,SAGX,aAAW,kBACX,cAAY,YAInB,C,iLCnCYI,EAAiBV,EAAAA,GAAAA,IAAH,mGAOdW,EAAOX,EAAAA,GAAAA,EAAH,qNAeJY,EAASZ,EAAAA,GAAAA,IAAH,kLAQG,SAAAa,GAAK,OAAIA,EAAMV,KAAV,IAGdW,EAASd,EAAAA,GAAAA,OAAH,sS,SCpBNe,EAAU,SAAC,GAAuC,IAAD,IAApCC,QAAWC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,OACvCC,GAAyBC,EAAAA,EAAAA,IAAYC,EAAAA,IAErCC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,+BACE,UAACd,EAAD,YACE,SAACE,EAAD,CAAQT,MC1BR,IAAN,OAAWsB,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,KD0BnD,UAAqCC,EAAAA,EAAAA,GAAQX,MAE7C,UAACP,EAAD,WACGO,GACD,sCAAcC,SAGhB,SAACL,EAAD,CAAQgB,KAAK,SAASC,QAdP,WACnBR,GAASS,EAAAA,EAAAA,IAAcf,GACxB,EAYK,SACGG,GACC,SAACa,EAAA,EAAD,CACE/B,QAASkB,EACTjB,MAAO,UACPC,KAAM,MAGR,SAAC,MAAD,CAAiBA,KAAM,WAMlC,EE9CY8B,EAAelC,EAAAA,GAAAA,GAAH,0EAMZmC,EAAkBnC,EAAAA,GAAAA,GAAH,0DCe5B,EAdoB,WAClB,IAAMoC,GAAkBf,EAAAA,EAAAA,IAAYgB,EAAAA,IAEpC,OACE,SAACH,EAAD,UACGE,EAAgBE,KAAI,SAAAtB,GAAO,OAC1B,SAACmB,EAAD,WACE,SAACpB,EAAD,CAASC,QAASA,KADEA,EAAQC,GADJ,KAOjC,ECnBYlB,EAAYC,EAAAA,GAAAA,IAAH,gKAWTuC,EAAQvC,EAAAA,GAAAA,GAAH,mICmBlB,EAvBiB,WACf,IAAMuB,GAAWC,EAAAA,EAAAA,MAEXgB,GAAYnB,EAAAA,EAAAA,IAAYoB,EAAAA,IACxBC,GAAQrB,EAAAA,EAAAA,IAAYsB,EAAAA,IAM1B,OAJAC,EAAAA,EAAAA,YAAU,WACRrB,GAASsB,EAAAA,EAAAA,MACV,GAAE,CAACtB,KAGF,UAACxB,EAAD,YACE,SAACwC,EAAD,uBAECC,IAAcE,GACb,SAACT,EAAA,EAAD,CAAgB/B,QAASsC,EAAWrC,MAAO,aAE3C,SAAC,EAAD,MAIP,C","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.js","components/ContactList/Contact/Contacts.styled.js","components/ContactList/Contact/Contact.js","utils/random-colors.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import PropTypes from 'prop-types';\nimport BarLoader from 'react-spinners/BarLoader';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport { Container } from './Loader.styled';\n\nexport const LoaderContact = ({ loading, color, size }) => {\n  return (\n    <ClipLoader\n      color={color}\n      loading={loading}\n      cssOverride={{\n        display: 'block',\n      }}\n      size={size}\n      aria-label=\"Loading Spinner\"\n      data-testid=\"loader\"\n    />\n  );\n};\n\nexport const LoaderContacts = ({ loading, color }) => {\n  return (\n    <Container>\n      <BarLoader\n        height={4}\n        width={280}\n        color={color}\n        loading={loading}\n        cssOverride={{\n          display: 'block',\n        }}\n        // size={150}\n        aria-label=\"Loading Spinner\"\n        data-testid=\"loader\"\n      />\n    </Container>\n  );\n};\n\nLoaderContact.propTypes = {\n  loading: PropTypes.bool,\n  color: PropTypes.string,\n  size: PropTypes.node,\n};\n\nLoaderContacts.propTypes = {\n  loading: PropTypes.bool,\n  color: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 30px;\n  padding: 5px 0;\n`;\n\nexport const Text = styled.p`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 5px;\n  font-family: inherit;\n  font-size: 15px;\n\n  flex-grow: 1;\n\n  span {\n    font-size: 12px;\n  }\n`;\n\nexport const Avatar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n\n  border-radius: 50%;\n  background-color: ${props => props.color};\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  padding: 0;\n  margin: 0;\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n\n  svg {\n    color: #bdbdbd;\n  }\n\n  &:hover {\n    svg {\n      color: #63a4ff;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MdDeleteForever } from 'react-icons/md';\n\nimport { getRandomHexColor, upFirst } from 'utils/index';\nimport { selectIsLoadingDeleteContact } from 'redux/selectors';\nimport { LoaderContact } from 'components/Loader/Loader';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  ContactWrapper,\n  Text,\n  Avatar,\n  Button,\n} from 'components/ContactList/Contact/Contacts.styled';\n\nexport const Contact = ({ contact: { id, name, number } }) => {\n  const isLoadingDeleteContact = useSelector(selectIsLoadingDeleteContact);\n  // const isLoadingDeleteContact = true;\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      <ContactWrapper>\n        <Avatar color={getRandomHexColor()}>{upFirst(name)}</Avatar>\n\n        <Text>\n          {name}\n          <span>Phone: {number}</span>\n        </Text>\n\n        <Button type=\"button\" onClick={handleDelete}>\n          {isLoadingDeleteContact ? (\n            <LoaderContact\n              loading={isLoadingDeleteContact}\n              color={'#003b8e'}\n              size={10}\n            />\n          ) : (\n            <MdDeleteForever size={28} />\n          )}\n        </Button>\n      </ContactWrapper>\n    </>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","export const getRandomHexColor = () => {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n};\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ContactListItem = styled.li`\n  border-top: 1px solid #5e91f2;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nimport { Contact } from 'components/ContactList/Contact/Contact';\nimport {\n  ContactsList,\n  ContactListItem,\n} from 'components/ContactList/ContactList.styled';\n\nconst ContactList = () => {\n  const visibleСontacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactsList>\n      {visibleСontacts.map(contact => (\n        <ContactListItem key={contact.id}>\n          <Contact contact={contact} />\n        </ContactListItem>\n      ))}\n    </ContactsList>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 350px;\n  padding: 20px;\n\n  margin: 0 auto;\n\n  border: 1px solid black;\n  border-radius: 10px;\n  border-color: #5e91f2;\n`;\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  text-align: center;\n  font-weight: 700;\n  font-size: 30px;\n  color: #003b8e;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/selectors';\n\nimport ContactList from 'components/ContactList';\nimport { LoaderContacts } from 'components/Loader/Loader';\nimport { Container, Title } from './Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Title>Contacts</Title>\n\n      {isLoading && !error ? (\n        <LoaderContacts loading={isLoading} color={'#2196f3'} />\n      ) : (\n        <ContactList />\n      )}\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["Container","styled","LoaderContact","loading","color","size","cssOverride","display","LoaderContacts","height","width","ContactWrapper","Text","Avatar","props","Button","Contact","contact","id","name","number","isLoadingDeleteContact","useSelector","selectIsLoadingDeleteContact","dispatch","useDispatch","Math","floor","random","toString","upFirst","type","onClick","deleteContact","Loader","ContactsList","ContactListItem","visibleСontacts","selectVisibleContacts","map","Title","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts"],"sourceRoot":""}